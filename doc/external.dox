/**
@mainpage Introduction
@tableofcontents

@details
This is the official documentation for the Conestoga Robotics Innovation
Group's InMoov project. It is not meant to be read linearly or all at once.
Rather, readers should skim relevant pages and skip information that requires
more context. More in depth information is provided for those that wish to
modify the source code. Examples are provided when possible for quick reference
and experimentation. Note that colored phrases are links for both html and pdf.
This project has a <a href="https://git-scm.com/">git</a> repository located
<a href="https://github.com/rbong/rig-inmoov">here</a>.
You can download the project with the following command after installing git on
your system.
@code{.sh}
git clone github.com/rbong/rig-inmoov
@endcode

@section Dependencies Dependencies
The embedded system (servo and flex sensor glove code) currently depends on
<a href="http://www.python.org">Python</a> for an example script,
<a href="http://www.arduino.cc">Arduino</a> for the actual code,
<a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a> and
<a href="https://www.tug.org/texlive/">texlive</a> (if you wish to remake the
documentation), <a href="http://www.gnu.org/software/make/"> Make</a> (if you
wish to build the project), and <a href="http://www.ros.org/">ROS</a>/<a
href="http://libserial.sourceforge.net/">LibSerial</a> for the simulation.

@section Quick_Start Quick Start
To quickly upload to the right hand without using \b make, do the following.
Copy the \b arduino/sketch/servo folder to your
<a href="https://www.arduino.cc/en/Guide/Environment#toc7">Arduino sketchbook
folder</a> or any new folder. Copy \b servo/settings/servo_rhand.h to \b
servo/settings.h in the sketch directory. Open the Arduino software.
<a href="https://www.arduino.cc/en/Guide/Environment#toc9">Select your board
and the port</a> it is connected to. Open (<b>File>Open</b>) \b servo.ino, and
hit upload. Other Arduino files on the bot can be built in a similar way, or
the \b make system command can be used. See @ref Installation for using make.

To transmit commands to the board, run this from the command line.
@code{.sh}
python -i example/servo_demo.py
@endcode
You can now run commands defined in @ref servo_demo.

The python script needs the pyserial library. Its website is located
<a href="http://pyserial.sourceforge.net/">here.</a>

See @ref servo_demo.connect to connect to the board.

To demo some movements, run this.
@code{.py}
demo ()
@endcode
Note that some movements require input before continuing (press enter).

See @ref servo_demo.cmd for sending any movement commands. Send strings of
bytes as defined in @ref Arduiono and @ref Examples.

The example script can also be used to calibrate the motors. Read the @ref
servo_demo documentation for more.

To run the 3D simulation of the project, please refer to @ref Simulation.

@section Installation Installation
You can build this documentation with the command
@code{.sh}
make documentation
@endcode
from the root directory.

To upload the right hand servo code to the connected Arduino, run
@code{.sh}
make servo.ino SETTINGS=servo_rhand ARDUINO_DO=--upload BOARD=nano PORT='/dev/ttyUSB0'
@endcode
Assuming the board is the arduino nano. For the arduino uno, BOARD would be uno
and PORT would be \b /dev/ttyACM0. If multiple boards are connected, or if a
board connects and disconnects quickly, the port number may increment. For
example, \b /dev/ttyUSB1. If you wish to modify \b Makefile, please refer to
<a href="http://www.gnu.org/software/make/manual/make.html">the make
manual</a>.

This also requires that the latest version of \b Arduino is installed. Some
systems don't have a package for the latest version, such as Ubuntu. The
previous version of \b Arduino does not have command line capabilities and
cannot be automated. Fortunately, the build system creates a valid arduino
directory structure that we can open in the graphical \b Arduino IDE. In this
case, you can run
@code{.sh}
make servo.ino SETTINGS=servo_rhand
@endcode
And \b Arduino will open. Open a project and navigate to \b
rig-inmoov/build/servo and open the \b servo.ino file inside.

@section Build Build System
## Arduino Directory Structure
The Arduino IDE abstracts many tools for working with Arduino hardware. We
choose to use it because of its ease of use and cross system compatibility.
However, the \b Arduino IDE only recently started coming with control tools for
the command line (a process which \b make uses to compile and upload the
project). Some versions of Linux do not come with the newest version of
Arduino. Replicating the process performed by the \b Arduino IDE requires
complex tools not appropriate for this project.

What follows is a description of what \b make performs to build and upload the
embedded code (as defined in \b Makefile) for those not able to use the newest
version of \b Arduino.

To share code among certain boards, general code is kept in subdirectories
under \b rig-inmoov/arduino/sketch. Inside each subdirectory is an \b .ino file
of the same name, which is the source for the sketch. There is also a \b
settings folder in which various headers are kept. These headers are to be
moved to \b settings.h inside the sketch folder. For example, code to be shared
among servos is kept in \b arduino/sketch/servo/servo.ino, the configuration
for the right hand is kept in \b arduino/sketch/servo/settings/servo_rhand.h,
and you would move it to \b arduino/sketch/servo/settings.h (or another folder
which you moved \b servo.ino into) to use it. You would then open \b servo.ino
in the \b Arduino IDE.

Some sketches require shared code that use Arduino libraries, which means that
they need to be contained in \b .ino files. Arduino includes any \b .ino files
inside a sketch subdirectory. We keep such files in \b arduino/lib.

The reason that we do not use \b .ino files for settings files is that \b .ino
files do not have a guaranteed order of inclusion.

@section Arduino Arduino Protocol
The Arduinos controlling the various parts of the bot communicate over their
serial ports. All information is sent and recieved using 8 bit unsigned raw
integers instead of text. This allows extremely fast and simple code, but
limits programs to 255 signals, identifiers, and values.

@subsection Servo Servo Boards
The Arduino servo boards only have one function; to pass commands to their
servos.
@par Servo ID
Unless otherwise instructed, the servo boards accept two values at a time.
First, it accepts a servo ID, and a value to write to the pin associated with
that servo.
@par
Servo IDs start at 0 and should be uniquely identified on every board,
allowing a maximum of 255 servos on each bot, not including signals. They
should be assigned different values because if commands are routed through a
central board, it allows the protocol to remain the same. If an invalid servo
ID is passed to any given board, the board will still read another value
from the serial port to avoid syncing issues, but it will do nothing to its
servos.
@par Servo Values
The value passed to the servo can be from 0-180. If it exceeds 180 and is not a
valid signal, the board will change the angle to 180. On positional rotation
servos, this number represents the servo's target angle. On continuous rotation
servos, 90 represents stillness, 180 represents full speed in one direction,
and 0 represents full speed in the other.
@par
Each board has callibrations for each servo that scale the angles from 0-180 to
some minimum angle and some maximum angle. The host program has no need to know
these values. When the board reports current values, they are scaled.
@par
To ensure that the board is reading the correct information (servo ID or
servo position), there is a cancel signal.

@subsection Signals
All boards accept some pre-defined signals that break the default flow. It can
receive these signals at any time and will terminate its current servo command.
In addition, the board may print some signals to output. Both kinds of signals,
incoming and outgoing, are assigned starting from 255 and going down. In the
arduino code, incoming signals are denoted by \b *_SIGNAL, and the outgoing
signals are denoted by \b *_RESPONSE. We will use this convention.

@subsubsection CANCEL_SIGNAL
This signal exists to cancel all pending input and syncronize the host and
master. If a host connects to an Arduino and does not know its current state,
it can send this signal and know that the board is waiting on a servo ID.

@subsubsection WAIT_RESPONSE
This response indicates that the board has no bytes left to read and is ready
for input. A host does not need to wait for this response, but it may want to
if it is experiencing difficulties or the board may have crashed.

@subsubsection START_RESPONSE
@subsubsection END_RESPONSE
These responses mark the beginning and end of a reply to some signal.

@subsubsection DUMP_SIGNAL
This signal makes the board return various information about itself and its
servos. As of writing, it returns \b START_RESPONSE, an ID, its number of
servos, the IDs of each servo followed by the value last sent to that servo,
and \b END_RESPONSE. If a serial connection has access to other boards and is
able to send them commands, it may send more servo IDs and servo positions
before \b END_RESPONSE. Board IDs start from 181 and go up. It is recommended
that if we build more modular bots such as this one in the future using the
same protocol, they recieve unique board identifiers. The response is likely to
change in the near future as we add sensors and other types of devices. Be sure
to regularly check this document.

@subsection Examples
@code{.sh}
CANCEL_SIGNAL 0 180 1 135 2 90
@endcode
This would send the servo with ID 0 a value of 180, servo 1 135, and
servo 2 90. The board would then respond with \b WAIT_RESPONSE.
@code{.sh}
CANCEL_SIGNAL 0 180 1 135 22 CANCEL_SIGNAL 4 45
@endcode
This would send the servo with ID 0 a value of 180, servo 1 135, begin
to read a command for servo 22 but cancel, then send 45 to servo 4.
@code{.sh}
CANCEL_SIGNAL 0 0 1 45 2 90 3 135 4 180 DUMP_SIGNAL
@endcode
On a board with ID \b BOARD_ID and 5 servos identified as 0-4, this would
return the response
@code{.sh}
START_RESPONSE BOARD_ID 4 0 0 1 45 2 90 3 135 4 180 END_RESPONSE WAIT_RESPONSE
@endcode
@code{.sh}
CANCEL_SIGNAL 0 0 0 45 0 90 0 135 0 180
@endcode
If this stream of bytes were sent instantly, it would essentially move servo 0
directly to 180 degrees (if it was a positional servo) because of the speed of
the commands. However, if we inserted a slight delay, we could slowly move the
servo from its starting position to its ending position.
@code{.sh}
CANCEL_SIGNAL 0 0 1 0 0 45 1 45 0 90 1 90 0 135 1 135 0 180 1 180
@endcode
This would move servo 0 and servo 1 from their start to end positions. If we
were to send these bytes immediately, they would essentially both move
instantaneously to 180 degrees (if they were positional servos). However, if we
were to insert a delay, they would both appear to move together slowly to their
end location despite the delay between commands. Putting this functionality on
the Arduino boards themselves would cause the boards to lock and use up
resources, but formulating commands like this allows computation to occur on
other systems.

@subsection Values Values
### Board IDs
<table>
    <tr>
        <td>Right hand servo board</td>
        <td>181</td>
    </tr>
    <tr>
        <td>Right hand flex sensor board</td>
        <td>182</td>
    </tr>
</table>
### Servo IDs
<table>
    <tr>
        <td>Right hand wrist</td>
        <td>0</td>
    </tr>
    <tr>
        <td>Right hand thumb</td>
        <td>1</td>
    </tr>
    <tr>
        <td>Right hand index finger</td>
        <td>2</td>
    </tr>
    <tr>
        <td>Right hand middle finger</td>
        <td>3</td>
    </tr>
    <tr>
        <td>Right hand ring finger</td>
        <td>4</td>
    </tr>
    <tr>
        <td>Right hand pinky finger</td>
        <td>5</td>
    </tr>
</table>
### Signals
<table>
    <tr>
        <td>@ref CANCEL_SIGNAL</td>
        <td>255</td>
    </tr>
    <tr>
        <td>@ref WAIT_RESPONSE</td>
        <td>254</td>
    </tr>
    <tr>
        <td>@ref DUMP_SIGNAL</td>
        <td>253</td>
    </tr>
    <tr>
        <td>@ref START_RESPONSE</td>
        <td>252</td>
    </tr>
    <tr>
        <td>@ref END_RESPONSE</td>
        <td>251</td>
    </tr>
</table>
**/

/**
@page Simulation Simulation
@tableofcontents

@details The simulation for the RIGbot runs in ROS. It accepts commands in the
same protocol described in @ref index.Arduino. You must first use git to
download the project, detailed in @ref index.

This section only details basic usage and slight modification. For the
information required to add any new features, model modifications, or bug fixes,
you may need to read the beginner level
<a href="http://wiki.ros.org/ROS/Tutorials">ROS tutorials</a> and the
<a href="http://wiki.ros.org/urdf_tutorial">urdf tutorials</a>.

@section Dependencies Dependencies
The simulation depends on <a href="http://www.ros.org/">ROS</a>. We use the
\b Jade version, as it is the long term release. It is recommended you
<a href="http://wiki.ros.org/jade/Installation/">install the full system</a>
because of the number of the large number of ROS packages. On Ubuntu, this is
achieved with the following commands.
@code{.sh}
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net:80 --recv-key 0xB01FA116
sudo apt-get update
sudo apt-get install ros-jade-desktop-full
@endcode
If you experience problems, please read the full wiki article.

@section Building Building
To build the simulation, simply run the following from the root directory of
the project.
@code{.sh}
make simulation
@endcode

You may also want to build manually. Before running any ROS commands, you must
run this command.
@code{.sh}
source /opt/ros/jade/setup.bash
@endcode
There are also .zsh and .sh files for users of \b zsh or \b sh. It is
recommended you append this command to your shell's
<a href="http://unix.stackexchange.com/questions/129143/what-is-the-purpose-of-bashrc-and-how-does-it-work">.rc</a>
file (ex. ~/.bashrc).  Make sure to fill in the absolute path to
\b rig-inmoov/catkin-ws.

The following only needs to be run once.
@code{.sh}
cd catkin_ws/src
catkin_init_workspace
@endcode

Finally, we can build the project.
@code{.sh}
cd catkin_ws
catkin_make
@endcode

@section Usage Usage
After running all the necessary setup commands, you can finally run the
simulation.
@code{.sh}
roslaunch robot_description display.launch port:=/dev/ttyACM0
@endcode
This requires that an input board such as the flex sensor glove is connected.
Replace "port" with the port your desired board is connected on (search for the
naming convention for your board online). The output from launch commands is
captured in \b ~/.ros/log/.

You can also set and change the port later with the following command.
@code{.sh}
rosparam set /serial_publisher/port /path/to/port
@endcode
The serial publisher does not need to be running.

If the serial publisher crashes because it loses connection, you can re-launch
it with this command without ending the visualizer.
@code{.sh}
rosrun robot_description serial_publisher
@endcode

@section Background Background
We have two custom programs used to maintain the simulation. The first is
\b serial_publisher, compiled from \b
catkin_ws/src/robot_description/src/serial_publisher.cpp. This program accepts
input from a serial port and translates it to a <a
href="http://wiki.ros.org/Topics">ROS topic</a>.

The other program is \b state_publisher, compiled from \b state_publisher.cpp
in the same directory. This program listens to the topic and translates it into
joint positions, which <a href="http://wiki.ros.org/rviz">rviz</a> (the
visualizer component of ROS) listens to. It expects input of the same protocol
as described in @ref Introduction.

The modularity of these programs makes it easy to write publishers for new
protocols (such as bluetooth) using just \b serial_publisher.cpp as reference.
It also makes it easy to add new parts to \b state_publisher. New programs need
to be added to \b catkin_ws/src/robot_description/CMakeLists.txt.

The rviz visualizer is loaded with a
<a href="http://wiki.ros.org/urdf_tutorial">urdf</a> file, stored in \b
catkin_ws/src/robot_description/model.xml, that describes how the different 3D
models that make up movable parts are positionally related to one another.

@section Debugging Debugging
There are two example launch files used for debugging, stored in \b
catkin_ws/src/robot_description/launch along with \b display.launch. The first 
is debug.launch, which launches state_publisher and serial_publisher in gdb,
and the second, \b memdebug.launch, launches both programs in Valgrind. It is
recommended that you use the three launch files as reference when modifying and
creating program systems.
**/
